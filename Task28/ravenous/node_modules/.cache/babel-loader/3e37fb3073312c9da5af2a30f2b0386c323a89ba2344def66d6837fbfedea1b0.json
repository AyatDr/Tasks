{"ast":null,"code":"const apiKey = '';\nconst Yelp = {\n  // search method to interact with Yelp's API.\n  // It takes three parameters: term, location, and sortBy.\n  search(term, location, sortBy) {\n    // Fetch data from Yelp API using the provided parameters.\n    // The URL includes a CORS proxy to avoid cross-origin issues in the browser.\n\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n      // Set the Authorization header with the Bearer token (apiKey).\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      // Convert the response to JSON format.\n      return response.json();\n    }).then(jsonResponse => {\n      // Check if jsonResponse contains the 'businesses' field.\n      if (jsonResponse.businesses) {\n        // Map over the array of businesses and transform the data \n        // into a format that the application expects.\n        return jsonResponse.businesses.map(business => ({\n          id: business.id,\n          imageSrc: business.image_url,\n          name: business.name,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          category: business.categories[0].title,\n          rating: business.rating,\n          reviewCount: business.review_count\n        }));\n      }\n    });\n  }\n};\n// Export the Yelp object to be used in other parts of the application.\nexport default Yelp;","map":{"version":3,"names":["apiKey","Yelp","search","term","location","sortBy","fetch","headers","Authorization","then","response","json","jsonResponse","businesses","map","business","id","imageSrc","image_url","name","address","address1","city","state","zipCode","zip_code","category","categories","title","rating","reviewCount","review_count"],"sources":["C:/Users/mahfo/OneDrive/Desktop/Internship/Task28/ravenous/src/util/Yelp.js"],"sourcesContent":["const apiKey = ''; \n\nconst Yelp = {\n  // search method to interact with Yelp's API.\n  // It takes three parameters: term, location, and sortBy.\n  search(term, location, sortBy) {\n    // Fetch data from Yelp API using the provided parameters.\n    // The URL includes a CORS proxy to avoid cross-origin issues in the browser.\n\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n      // Set the Authorization header with the Bearer token (apiKey).\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n       // Convert the response to JSON format.\n      return response.json();\n    }).then(jsonResponse => {\n        // Check if jsonResponse contains the 'businesses' field.\n      if (jsonResponse.businesses) {\n         // Map over the array of businesses and transform the data \n        // into a format that the application expects.\n        return jsonResponse.businesses.map(business => ({\n          id: business.id,\n          imageSrc: business.image_url,\n          name: business.name,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          category: business.categories[0].title,\n          rating: business.rating,\n          reviewCount: business.review_count\n        }));\n      }\n    });\n  }\n};\n// Export the Yelp object to be used in other parts of the application.\nexport default Yelp;\n  \n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,EAAE;AAEjB,MAAMC,IAAI,GAAG;EACX;EACA;EACAC,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IAC7B;IACA;;IAEA,OAAOC,KAAK,CAAE,sFAAqFH,IAAK,aAAYC,QAAS,YAAWC,MAAO,EAAC,EAAE;MAChJ;MACAE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASR,MAAO;MAClC;IACF,CAAC,CAAC,CAACS,IAAI,CAACC,QAAQ,IAAI;MACjB;MACD,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CAACF,IAAI,CAACG,YAAY,IAAI;MACpB;MACF,IAAIA,YAAY,CAACC,UAAU,EAAE;QAC1B;QACD;QACA,OAAOD,YAAY,CAACC,UAAU,CAACC,GAAG,CAACC,QAAQ,KAAK;UAC9CC,EAAE,EAAED,QAAQ,CAACC,EAAE;UACfC,QAAQ,EAAEF,QAAQ,CAACG,SAAS;UAC5BC,IAAI,EAAEJ,QAAQ,CAACI,IAAI;UACnBC,OAAO,EAAEL,QAAQ,CAACX,QAAQ,CAACiB,QAAQ;UACnCC,IAAI,EAAEP,QAAQ,CAACX,QAAQ,CAACkB,IAAI;UAC5BC,KAAK,EAAER,QAAQ,CAACX,QAAQ,CAACmB,KAAK;UAC9BC,OAAO,EAAET,QAAQ,CAACX,QAAQ,CAACqB,QAAQ;UACnCC,QAAQ,EAAEX,QAAQ,CAACY,UAAU,CAAC,CAAC,CAAC,CAACC,KAAK;UACtCC,MAAM,EAAEd,QAAQ,CAACc,MAAM;UACvBC,WAAW,EAAEf,QAAQ,CAACgB;QACxB,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AACD;AACA,eAAe9B,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}